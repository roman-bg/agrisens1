{"version":3,"sources":["Popup.js","App.js","serviceWorker.js","index.js"],"names":["Popup","className","this","props","text","href","onClick","closePopup","React","Component","MqttClient","url","topic","onMessage","client","connect","clientId","protocolId","protocolVersion","connectTimeout","debug","on","subscribe","err","console","log","App","handleTopicChange","bind","handleBrokerUrlChange","mqttConnect","onMqttMessage","state","broker_url","temperature","e","setState","target","value","end","preventDefault","message","parseFloat","toString","showPopup","togglePopup","onSubmit","type","name","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8YAgBeA,E,uKAXf,OACA,yBAAKC,UAAU,SACf,yBAAKA,UAAU,iBACf,2BAAIC,KAAKC,MAAMC,KAAf,IAAqB,uBAAGC,KAAK,sCAAR,uBACrB,4BAAQC,QAASJ,KAAKC,MAAMI,YAA5B,oD,GANoBC,IAAMC,WCEpBC,EACJ,WAAYC,EAAKC,EAAOC,GAAY,IAAD,2BACjCX,KAAKY,OAASC,kBAAQJ,EAAK,CACzBK,SAAU,aACVC,WAAY,SACZC,gBAAiB,EACjBC,eAAgB,IAChBC,OAAO,IAETlB,KAAKY,OAAOO,GAAG,WAAW,WACxB,EAAKP,OAAOQ,UAAUV,GAAO,SAACW,GACvBA,EAGHC,QAAQC,IAAI,SAFZD,QAAQC,IAAI,iBAAmBb,SAMrCV,KAAKY,OAAOO,GAAG,UAAWR,IAyFfa,E,kDAlFb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAEDwB,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,sBAAwB,EAAKA,sBAAsBD,KAA3B,gBAC7B,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,cAAgB,EAAKA,cAAcH,KAAnB,gBAErB,EAAKd,OAAS,KAEd,EAAKkB,MAAQ,CACXC,WAAY,2BACZrB,MAAO,QACPsB,YAAa,GAbE,E,8DAiBDC,GAChBjC,KAAKkC,SAAS,CAAExB,MAAOuB,EAAEE,OAAOC,U,4CAGZH,GACpBjC,KAAKkC,SAAS,CAAEH,WAAYE,EAAEE,OAAOC,U,kCAG3BH,GACS,MAAfjC,KAAKY,QAAkBZ,KAAKY,OAAOyB,MAEvCrC,KAAKY,OAAS,IAAIJ,EACdR,KAAK8B,MAAMC,WACX/B,KAAK8B,MAAMpB,MACXV,KAAK6B,eAETI,EAAEK,mB,oCAGU5B,EAAO6B,GACnBvC,KAAKkC,SAAS,CACZF,YAAaQ,WAAWD,EAAQE,gB,oCAKtCzC,KAAKkC,SAAS,CACTQ,WAAY1C,KAAK8B,MAAMY,c,+BAKxB,OACE,yBAAK3C,UAAU,OAEb,yBAAKA,UAAU,cACf,6BACD,4BAAQK,QAASJ,KAAK2C,YAAYjB,KAAK1B,OAAvC,iEAENA,KAAK8B,MAAMY,UACZ,kBAAC,EAAD,CACUxC,KAAK,oVACLG,WAAYL,KAAK2C,YAAYjB,KAAK1B,QAE1C,MAIK,2MACG,2BACGA,KAAK8B,MAAME,YADd,YAIF,0BAAMjC,UAAU,WAAW6C,SAAU5C,KAAK4B,aACxC,2BAAO7B,UAAU,iBAAiB8C,KAAK,SAASC,KAAK,aAAaC,YAAY,aAAaX,MAAOpC,KAAK8B,MAAMC,WAAYiB,SAAUhD,KAAK2B,wBACxI,2BAAO5B,UAAU,iBAAiB8C,KAAK,SAASC,KAAK,aAAaC,YAAY,aAAaX,MAAOpC,KAAK8B,MAAMpB,MAAOsC,SAAUhD,KAAKyB,oBACnI,2BAAO1B,UAAU,aAAa8C,KAAK,SAAST,MAAM,kB,GA1E1C9B,IAAMC,WCjBJ0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAM3B,a","file":"static/js/main.636782b9.chunk.js","sourcesContent":["import React from 'react';  \n\n\nclass Popup extends React.Component {  \n  render() {  \nreturn (  \n<div className='popup'>  \n<div className='popup\\_inner'> \n<p>{this.props.text} <a href=\"https://www.agrisense.xyz/info.pdf\">тук</a></p>  \n<button onClick={this.props.closePopup}>затвори</button>  \n </div> \n</div>  \n);  \n}  \n}  \n\nexport default Popup;\n","import React from 'react';\nimport './App.css';\nimport { connect } from 'mqtt';\nimport Popup from './Popup';  \n\nclass MqttClient {\n  constructor(url, topic, onMessage) {\n    this.client = connect(url, {\n      clientId: 'testnodejs',\n      protocolId: 'MQIsdp',\n      protocolVersion: 3,\n      connectTimeout: 1000,\n      debug: true,\n    })\n    this.client.on('connect', () => {\n      this.client.subscribe(topic, (err) => {\n        if (!err) {\n          console.log('subscribed to ' + topic)\n        } else {\n          console.log('error')\n        }\n      })\n    })\n    this.client.on('message', onMessage)\n  }\n}\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleTopicChange = this.handleTopicChange.bind(this)\n    this.handleBrokerUrlChange = this.handleBrokerUrlChange.bind(this)\n    this.mqttConnect = this.mqttConnect.bind(this)\n    this.onMqttMessage = this.onMqttMessage.bind(this)\n\n    this.client = null\n\n    this.state = {\n      broker_url: 'ws://62.171.174.215:9093',\n      topic: 'tempo',\n      temperature: 0,\n    }\n  }\n\n  handleTopicChange(e) {\n    this.setState({ topic: e.target.value })\n  }\n\n  handleBrokerUrlChange(e) {\n    this.setState({ broker_url: e.target.value })\n  }\n\n  mqttConnect(e) {\n    if (this.client != null) { this.client.end() }\n\n    this.client = new MqttClient(\n        this.state.broker_url,\n        this.state.topic,\n        this.onMqttMessage )\n\n    e.preventDefault()\n  }\n\n  onMqttMessage(topic, message) {\n    this.setState({\n      temperature: parseFloat(message.toString()),\n    })\n  }\n  \n  togglePopup() {  \nthis.setState({  \n     showPopup: !this.state.showPopup  \n});  \n } \n\n  render() {\n    return (\n      <div className=\"App\">\n       \n        <div className=\"App-header\">\n        <div>\n       <button onClick={this.togglePopup.bind(this)}> Информация</button>  \n\n{this.state.showPopup ?  \n<Popup  \n          text='за информация относно различните насекоми изтеглете таблицата '  \n          closePopup={this.togglePopup.bind(this)}  \n/>  \n: null  \n}  \n       \n       </div>\n       <h1>Сума на ефективните температури</h1>\n          <p>\n            {this.state.temperature} ℃\n          </p>\n        </div>\n        <form className=\"App-form\" onSubmit={this.mqttConnect}>\n          <input className=\"App-broker-url\" type=\"hidden\" name=\"broker_url\" placeholder=\"broker url\" value={this.state.broker_url} onChange={this.handleBrokerUrlChange} />\n          <input className=\"App-mqtt-topic\" type=\"hidden\" name=\"mqtt_topic\" placeholder=\"mqtt topic\" value={this.state.topic} onChange={this.handleTopicChange} />\n          <input className=\"App-submit\" type=\"submit\" value=\"Connect\" />\n        </form>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}